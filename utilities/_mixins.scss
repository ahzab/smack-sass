// Create BEM element selectors
@mixin e($element) {
	&__#{$element} {
    @content;
  }
}

// Create BEM modifier selectors
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Generate :before or :after pseudo-element shapes
@mixin pseudo-el($el, $el-w: null, $el-h: null) {
	@if $el == "before" or $el == "after" {
	  &:#{$el} {
		  @extend %pseudos;
		  width: $el-w;
	  	height: $el-h;
	    @content;
	  }
	}
	@else {
    @error "`#{$el}` is not a valid pseudo-element.";
	}
}

// Media queries
@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint-lg) {
      @content;
    }
  }
   @else {
   	@error "`#{$break}` is not a valid breakpoint."
  }
}

// Calculate grid columns
@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));
    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Apply left margin to all but first column
@mixin lefty($margin: 1em) {
	& + & {
	  margin-left: $margin;
    @content;
	}
}
